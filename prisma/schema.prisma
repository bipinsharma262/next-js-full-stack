datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  password String?   @unique
  accounts Account[]
  sessions Session[]
  otps     OTP[]
  products Product[]
  orders   Order[]   // Add this line

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OTP {
  id     String    @id @default(cuid())
  code   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Account {
  id                       String     @id @default(cuid())
  userId                   String     @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String      @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id          String    @id @default(cuid())
  name        String
  email       String
  cardNumber  String
  expiry      String
  cvc         String
  amount      Int

  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  @@index([userId])
}

model Product {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  orders      Order[]   // Add this line
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}